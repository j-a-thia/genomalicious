numLoci=100, additiveVar=0.3, environVar=0.7
)
mod.ped <- MCMCglmm(
P ~ 1,
random = ~SAMPLE, ginv = list(SAMPLE = A.inv),
data = simQTL$trait,
prior = list(
G = list(G1 = list(V = 1, nu = 0.002, alpha.mu=0, alpha.V=var(simQTL$trait$P))),
R = list(V = 1, nu = 0.002)
),
nitt = 500000, burnin = 50000, thin=20
)
summary(mod.ped)
h2.ped <- mod.ped$VCV[,'SAMPLE'] / rowSums(mod.ped$VCV)
hist(h2.ped, breaks=100)
simQTL <- family_sim_qtl(
famGenos=rbind(simFamily$focal.pairs, simFamily$parents),
numLoci=100, additiveVar=0.1, environVar=0.9
)
simQTL <- family_sim_qtl(
famGenos=rbind(simFamily$focal.pairs, simFamily$parents),
numLoci=100, additiveVar=0.1, environVar=0.9
)
simQTL$trait
mod.ped <- MCMCglmm(
P ~ 1,
random = ~SAMPLE, ginv = list(SAMPLE = A.inv),
data = simQTL$trait,
prior = list(
G = list(G1 = list(V = 1, nu = 0.002, alpha.mu=0, alpha.V=var(simQTL$trait$P))),
R = list(V = 1, nu = 0.002)
),
nitt = 500000, burnin = 50000, thin=20
)
summary(mod.ped)
h2.ped <- mod.ped$VCV[,'SAMPLE'] / rowSums(mod.ped$VCV)
hist(h2.ped, breaks=100)
hist(h2.ped, breaks=100)
summary(h2.ped)
simQTL <- family_sim_qtl(
famGenos=rbind(simFamily$focal.pairs, simFamily$parents),
numLoci=100, additiveVar=0.1, environVar=0.9
)
mod.ped <- MCMCglmm(
P ~ 1,
random = ~SAMPLE, ginv = list(SAMPLE = A.inv),
data = simQTL$trait,
prior = list(
G = list(G1 = list(V = 1, nu = 0.002, alpha.mu=0, alpha.V=var(simQTL$trait$P))),
R = list(V = 1, nu = 0.002)
),
nitt = 500000, burnin = 50000, thin=20
)
summary(mod.ped)
h2.ped <- mod.ped$VCV[,'SAMPLE'] / rowSums(mod.ped$VCV)
hist(h2.ped, breaks=100)
h2.ped <- mod.ped$VCV[,'SAMPLE'] / rowSums(mod.ped$VCV)
hist(h2.ped, breaks=100)
h2.ped <- mod.ped$VCV[,'SAMPLE'] / rowSums(mod.ped$VCV)
hist(h2.ped, breaks=100)
simFamily <- family_sim_data(
freqData=freqData,
locusCol='LOCUS',
freqCol='FREQ',
numSims=25,
returnParents=TRUE,
returnPedigree=TRUE
)
simFamily
# Convert simulated families into a genotype matrix
simGenosMat <- DT2Mat_genos(rbind(simFamily$focal.pairs, simFamily$parents))
# Calculate the GRM
G <- rrBLUP::A.mat(simGenosMat, min.MAF=0)*2
# G <- AGHmatrix::Gmatrix(simGenosMat, 'Yang', 0)
G.inv <- Matrix(nearPD(G)$mat, sparse=TRUE) %>% solve
simQTL <- family_sim_qtl(
famGenos=rbind(simFamily$focal.pairs, simFamily$parents),
numLoci=100, additiveVar=0.1, environVar=0.9
)
mod.ped <- MCMCglmm(
P ~ 1,
random = ~SAMPLE, ginv = list(SAMPLE = A.inv),
data = simQTL$trait,
prior = list(
G = list(G1 = list(V = 1, nu = 0.002, alpha.mu=0, alpha.V=var(simQTL$trait$P))),
R = list(V = 1, nu = 0.002)
),
nitt = 500000, burnin = 50000, thin=20
)
simQTL <- family_sim_qtl(
famGenos=rbind(simFamily$focal.pairs, simFamily$parents),
numLoci=100, additiveVar=0.1, environVar=0.9
)
simQTL$trait
simQTL
simQTL$trait
A.inv <- inverseA(simFamily$pedigree)$Ainv
mod.ped <- MCMCglmm(
P ~ 1,
random = ~SAMPLE, ginv = list(SAMPLE = A.inv),
data = simQTL$trait,
prior = list(
G = list(G1 = list(V = 1, nu = 0.002, alpha.mu=0, alpha.V=var(simQTL$trait$P))),
R = list(V = 1, nu = 0.002)
),
nitt = 500000, burnin = 50000, thin=20
)
summary(mod.ped)
h2.ped <- mod.ped$VCV[,'SAMPLE'] / rowSums(mod.ped$VCV)
hist(h2.ped, breaks=100)
G <- AGHmatrix::Gmatrix(simGenosMat, 'Yang', 0)
G.inv <- Matrix(nearPD(G)$mat, sparse=TRUE) %>% solve
samps <- colnames(G)
A <- as.matrix(solve(A.inv))
rownames(A) <- colnames(A)
A <- A[samps,samps]
plot(A, G)
rbeta(10000,0.3,1)
rbeta(10000,0.3,1)
rbeta(10000,0.3,1)
rbeta(10000,0.3,1)
rbeta(10000,0.3,1)
rbeta(10000,0.3,1) %>% hist
rbeta(10000,0.4,1) %>% hist
freqData<- data.table(FREQ=rbeta(10000,0.3,1)) %>%
.[, LOCUS:=paste0('loc_',1:.N)] %>%
.[FREQ>0]
freqData
freqData<- data.table(FREQ=rbeta(10000,0.3,1)) %>%
.[, LOCUS:=paste0('loc_',1:.N)] %>%
.[FREQ>0.005]
freqData
simFamily <- family_sim_data(
freqData=freqData,
locusCol='LOCUS',
freqCol='FREQ',
numSims=25,
returnParents=TRUE,
returnPedigree=TRUE
)
# Convert simulated families into a genotype matrix
simGenosMat <- DT2Mat_genos(rbind(simFamily$focal.pairs, simFamily$parents))
# Calculate the GRM
G <- rrBLUP::A.mat(simGenosMat, min.MAF=0)*2
# G <- AGHmatrix::Gmatrix(simGenosMat, 'Yang', 0)
G.inv <- Matrix(nearPD(G)$mat, sparse=TRUE) %>% solve
simQTL <- family_sim_qtl(
famGenos=rbind(simFamily$focal.pairs, simFamily$parents),
numLoci=100, additiveVar=0.1, environVar=0.9
)
simQTL$trait
G[lower.tri(G)] %>% summary
G[lower.tri(G)] %>% hist
A.inv <- inverseA(simFamily$pedigree)$Ainv
A.inv <- inverseA(simFamily$pedigree)$Ainv
mod.ped <- MCMCglmm(
P ~ 1,
random = ~SAMPLE, ginv = list(SAMPLE = A.inv),
data = simQTL$trait,
prior = list(
G = list(G1 = list(V = 1, nu = 0.002, alpha.mu=0, alpha.V=var(simQTL$trait$P))),
R = list(V = 1, nu = 0.002)
),
nitt = 500000, burnin = 50000, thin=20
)
summary(mod.ped)
h2.ped <- mod.ped$VCV[,'SAMPLE'] / rowSums(mod.ped$VCV)
hist(h2.ped, breaks=100)
simQTL <- family_sim_qtl(
famGenos=rbind(simFamily$focal.pairs, simFamily$parents),
numLoci=100, additiveVar=0.3, environVar=0.9
)
simQTL$trait
G[lower.tri(G)] %>% summary
G[lower.tri(G)] %>% hist
A.inv <- inverseA(simFamily$pedigree)$Ainv
mod.ped <- MCMCglmm(
P ~ 1,
random = ~SAMPLE, ginv = list(SAMPLE = A.inv),
data = simQTL$trait,
prior = list(
G = list(G1 = list(V = 1, nu = 0.002, alpha.mu=0, alpha.V=var(simQTL$trait$P))),
R = list(V = 1, nu = 0.002)
),
nitt = 500000, burnin = 50000, thin=20
)
summary(mod.ped)
h2.ped <- mod.ped$VCV[,'SAMPLE'] / rowSums(mod.ped$VCV)
hist(h2.ped, breaks=100)
summary(h2.ped)
simQTL <- family_sim_qtl(
famGenos=rbind(simFamily$focal.pairs, simFamily$parents),
numLoci=100, additiveVar=0.7, environVar=0.3
)
mod.ped <- MCMCglmm(
P ~ 1,
random = ~SAMPLE, ginv = list(SAMPLE = A.inv),
data = simQTL$trait,
prior = list(
G = list(G1 = list(V = 1, nu = 0.002, alpha.mu=0, alpha.V=var(simQTL$trait$P))),
R = list(V = 1, nu = 0.002)
),
nitt = 500000, burnin = 50000, thin=20
)
summary(mod.ped)
h2.ped <- mod.ped$VCV[,'SAMPLE'] / rowSums(mod.ped$VCV)
hist(h2.ped, breaks=100)
summary(h2.ped)
h2.ped <- mod.ped$VCV[,'SAMPLE'] / rowSums(mod.ped$VCV)
hist(h2.ped, breaks=100)
summary(h2.ped)
simQTL <- family_sim_qtl(
famGenos=rbind(simFamily$focal.pairs, simFamily$parents),
numLoci=100, additiveVar=0.1, environVar=0.9
)
mod.ped <- MCMCglmm(
P ~ 1,
random = ~SAMPLE, ginv = list(SAMPLE = A.inv),
data = simQTL$trait,
prior = list(
G = list(G1 = list(V = 1, nu = 0.002, alpha.mu=0, alpha.V=var(simQTL$trait$P))),
R = list(V = 1, nu = 0.002)
),
nitt = 500000, burnin = 50000, thin=20
)
summary(mod.ped)
h2.ped <- mod.ped$VCV[,'SAMPLE'] / rowSums(mod.ped$VCV)
hist(h2.ped, breaks=100)
summary(h2.ped)
simQTL <- family_sim_qtl(
famGenos=rbind(simFamily$focal.pairs, simFamily$parents),
numLoci=1000, additiveVar=0.5, environVar=0.5
)
simQTL$trait
G[lower.tri(G)] %>% summary
G[lower.tri(G)] %>% hist
mod.ped <- MCMCglmm(
P ~ 1,
random = ~SAMPLE, ginv = list(SAMPLE = A.inv),
data = simQTL$trait,
prior = list(
G = list(G1 = list(V = 1, nu = 0.002, alpha.mu=0, alpha.V=var(simQTL$trait$P))),
R = list(V = 1, nu = 0.002)
),
nitt = 500000, burnin = 50000, thin=20
)
summary(mod.ped)
h2.ped <- mod.ped$VCV[,'SAMPLE'] / rowSums(mod.ped$VCV)
hist(h2.ped, breaks=100)
summary(h2.ped)
mod.grm
summary(mod.grm)
mod.grm <- MCMCglmm(
P ~ 1,
random = ~SAMPLE, ginv = list(SAMPLE = G.inv),
data = simQTL$trait,
prior = list(
G = list(G1 = list(V = 1, nu = 0.002)),
R = list(V = 1, nu = 0.002)
),
nitt = 500000, burnin = 50000, thin=15
)
?Matrix()
G.sp <- Matrix(G, sparse=TRUE)
hist(G.sp)
hist(G.sp)
G.sp
mod.grm <- MCMCglmm(
P ~ 1,
random = ~SAMPLE, ginv = list(SAMPLE = G.inv),
data = simQTL$trait,
prior = list(
G = list(G1 = list(V = 1, nu = 0.002), alpha.mu=0, alpha.V=var(simQTL$trait$P))),
R = list(V = 1, nu = 0.002)
),
mod.grm <- MCMCglmm(
P ~ 1,
random = ~SAMPLE, ginv = list(SAMPLE = G.inv),
data = simQTL$trait,
prior = list(
G = list(G1 = list(V = 1, nu = 0.002, alpha.mu=0, alpha.V=var(simQTL$trait$P))),
R = list(V = 1, nu = 0.002)
),
nitt = 500000, burnin = 50000, thin=15
)
gc()
simQTL <- family_sim_qtl(
famGenos=rbind(simFamily$focal.pairs, simFamily$parents),
numLoci=1000, additiveVar=0.5, environVar=0.5
)
simQTL$trait
G[lower.tri(G)] %>% summary
G[lower.tri(G)] %>% hist
# Calculate the GRM
G <- rrBLUP::A.mat(simGenosMat, min.MAF=0)*2
G
# Calculate the GRM
G <- rrBLUP::A.mat(simGenosMat, min.MAF=0)*2
# G <- AGHmatrix::Gmatrix(simGenosMat, 'Yang', 0)
G.inv <- Matrix(nearPD(G)$mat, sparse=TRUE) %>% solve
simQTL <- family_sim_qtl(
famGenos=rbind(simFamily$focal.pairs, simFamily$parents),
numLoci=1000, additiveVar=0.5, environVar=0.5
)
simQTL$trait
G[lower.tri(G)] %>% summary
G[lower.tri(G)] %>% hist
mod.grm <- MCMCglmm(
P ~ 1,
random = ~SAMPLE, ginv = list(SAMPLE = G.inv),
data = simQTL$trait,
prior = list(
G = list(G1 = list(V = 1, nu = 0.002, alpha.mu=0, alpha.V=var(simQTL$trait$P))),
R = list(V = 1, nu = 0.002)
),
nitt = 100000, burnin = 5000, thin=15
)
summary(mod.grm)
plot(mod.grm)
h2.grm <- mod.grm$VCV[,'SAMPLE'] / rowSums(mod.grm$VCV)
hist(h2.grm)
# G to D (a distance matrix)
G <- as.matrix(nearPD(G)$mat)
# Calculate the GRM
G <- rrBLUP::A.mat(simGenosMat, min.MAF=0)*2
# G <- AGHmatrix::Gmatrix(simGenosMat, 'Yang', 0)
G.inv <- Matrix(nearPD(G)$mat, sparse=TRUE) %>% solve
# G to D (a distance matrix)
D <-sqrt(diag(G)%*%t(i)+ i%*%t(diag(G))-2*G)
# G to D (a distance matrix)
i <- rep(1, ncol(G))
D <-sqrt(diag(G)%*%t(i)+ i%*%t(diag(G))-2*G)
D
# Distance tree
D.tree <- (phangorn::upgma(D))
D.tree
plot(D.tree)
# A matrix
Ainv.tr <- inverseA(D.tree, node='TIPS', scale=TRUE)$Ainv %>%
as.matrix
colnames(Ainv.tr) <- rownames(Ainv.tr)
A.tr <- solve(Ainv.tr)
A.tr
A
plot(A, A.tr)
samps <- colnames(AS)
samps <- colnames(A)
samps
plot(A, A.tr[samps,samps])
A.inv <- inverseA(simFamily$pedigree)$Ainv
A <- as.matrix(solve(A.inv))
rownames(A) <- colnames(A)
A <- A[samps,samps]
samps <- colnames(G)
A <- as.matrix(solve(A.inv))
rownames(A) <- colnames(A)
A <- A[samps,samps]
# A matrix
Ainv.tr <- inverseA(D.tree, node='TIPS', scale=TRUE)$Ainv %>%
as.matrix
colnames(Ainv.tr) <- rownames(Ainv.tr)
A.tr <- solve(Ainv.tr)
plot(A, A.tr[samps,samps])
plot(A[samps,samps], A.tr[samps,samps])
plot(G[samps,samps], A.tr[samps,samps])
plot(G[samps,samps], A[samps,samps])
Ainv.tr
mod.tr <- MCMCglmm(
P ~ 1,
random = ~SAMPLE, ginv = list(SAMPLE = Ainv.tr),
data = simQTL$trait,
prior = list(
G = list(G1 = list(V = 1, nu = 0.002, alpha.mu=0, alpha.V=var(simQTL$trait$P))),
R = list(V = 1, nu = 0.002)
),
nitt = 500000, burnin = 50000, thin=20
)
mod.tr <- MCMCglmm(
P ~ 1,
random = ~SAMPLE, ginv = list(SAMPLE = Matrix(Ainv.tr) ),
data = simQTL$trait,
prior = list(
G = list(G1 = list(V = 1, nu = 0.002, alpha.mu=0, alpha.V=var(simQTL$trait$P))),
R = list(V = 1, nu = 0.002)
),
nitt = 500000, burnin = 50000, thin=20
)
Matrix(Ainv.tr)
mod.tr <- MCMCglmm(
P ~ 1,
random = ~SAMPLE, ginv = list(SAMPLE = Matrix(Ainv.tr, sparse=TRUE) ),
data = simQTL$trait,
prior = list(
G = list(G1 = list(V = 1, nu = 0.002, alpha.mu=0, alpha.V=var(simQTL$trait$P))),
R = list(V = 1, nu = 0.002)
),
nitt = 500000, burnin = 50000, thin=20
)
solve(Matrix(A, sparse=TRUE))
mod.tr <- MCMCglmm(
P ~ 1,
random = ~SAMPLE, ginv = list(SAMPLE = solve(Matrix(A, sparse=TRUE)) ),
data = simQTL$trait,
prior = list(
G = list(G1 = list(V = 1, nu = 0.002, alpha.mu=0, alpha.V=var(simQTL$trait$P))),
R = list(V = 1, nu = 0.002)
),
nitt = 500000, burnin = 50000, thin=20
)
h2.tr <- mod$VCV[,'SAMPLE'] / rowSums(mod.tr$VCV)
h2.tr <- mod.tr$VCV[,'SAMPLE'] / rowSums(mod.tr$VCV)
summary(mod.tr)
hist(h2.tr)
hist(h2.tr, breaks=100)
Matrix(G, sparse=TRUE)
G2
G2[G2<0.05]
G2<-G
G2 <- G
G2[G2<0.05]
G2[G2<0.05] <- 0
G2
Matrix(G2, sparse=TRUE)
solve(Matrix(G2, sparse=TRUE))
G2 <- nearPD(G)$mat
G2[G2<0.05] <- 0
solve(Matrix(G2, sparse=TRUE))
solve(Matrix(nearPD(G2)$mat, sparse=TRUE))
A
Matrix(A, sparse=TRUE))
Matrix(A, sparse=TRUE)
solve(Matrix(A, sparse=TRUE))
rbind(simFamily$focal.pairs, simFamily$parents)
rbind(simFamily$focal.pairs, simFamily$parents)$SAMPLE
rbind(simFamily$focal.pairs, simFamily$parents)$SAMPLE %>% unique %>% length
simFamily <- family_sim_data(
freqData=freqData,
locusCol='LOCUS',
freqCol='FREQ',
numSims=10,
returnParents=TRUE,
returnPedigree=TRUE
)
simFamily
# Convert simulated families into a genotype matrix
simGenosMat <- DT2Mat_genos(rbind(simFamily$focal.pairs, simFamily$parents))
# Calculate the GRM
G <- rrBLUP::A.mat(simGenosMat, min.MAF=0)*2
G
# G <- AGHmatrix::Gmatrix(simGenosMat, 'Yang', 0)
G.inv <- Matrix(nearPD(G)$mat, sparse=TRUE) %>% solve
simQTL <- family_sim_qtl(
famGenos=rbind(simFamily$focal.pairs, simFamily$parents),
numLoci=1000, additiveVar=0.5, environVar=0.5
)
simQTL$trait
simQTL$trait
G[lower.tri(G)] %>% summary
G[lower.tri(G)] %>% hist
mod.ped <- MCMCglmm(
P ~ 1,
random = ~SAMPLE, ginv = list(SAMPLE = A.inv),
data = simQTL$trait,
prior = list(
G = list(G1 = list(V = 1, nu = 0.002, alpha.mu=0, alpha.V=var(simQTL$trait$P))),
R = list(V = 1, nu = 0.002)
),
nitt = 500000, burnin = 50000, thin=20
)
summary(mod.ped)
h2.ped <- mod.ped$VCV[,'SAMPLE'] / rowSums(mod.ped$VCV)
hist(h2.ped, breaks=100)
summary(h2.ped)
mod.grm <- MCMCglmm(
P ~ 1,
random = ~SAMPLE, ginv = list(SAMPLE = G.inv),
data = simQTL$trait,
prior = list(
G = list(G1 = list(V = 1, nu = 0.002, alpha.mu=0, alpha.V=var(simQTL$trait$P))),
R = list(V = 1, nu = 0.002)
),
nitt = 100000, burnin = 5000, thin=20
)
summary(mod.grm)
plot(mod.grm)
h2.grm <- mod.grm$VCV[,'SAMPLE'] / rowSums(mod.grm$VCV)
hist(h2.grm)
# Developer libraries
libs <- c('devtools', 'roxygen2', 'testthat', 'knitr', 'data.table', 'tidyverse')
for(L in libs){require(L, character.only=TRUE)}
# Make all documents
roxygenise(clean=TRUE)
library(genomalicious)
# Developer libraries
libs <- c('devtools', 'roxygen2', 'testthat', 'knitr', 'data.table', 'tidyverse')
for(L in libs){require(L, character.only=TRUE)}
# Make all documents
roxygenise(clean=TRUE)
library(genomalicious)
?`genomalicious-package`
# Developer libraries
libs <- c('devtools', 'roxygen2', 'testthat', 'knitr', 'data.table', 'tidyverse')
for(L in libs){require(L, character.only=TRUE)}
# Make just those documents that have changed
roxygenise()
library(genomalicious)
# Developer libraries
libs <- c('devtools', 'roxygen2', 'testthat', 'knitr', 'data.table', 'tidyverse')
for(L in libs){require(L, character.only=TRUE)}
# Make just those documents that have changed
roxygenise()
library(genomalicious)
