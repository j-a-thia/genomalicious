% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/family_sim_data.R
\name{family_sim_data}
\alias{family_sim_data}
\title{Simulate families of individuals from population allele frequencies}
\usage{
family_sim_data(freqData, locusCol = "LOCUS", freqCol = "FREQ", numSims = 100L)
}
\arguments{
\item{freqData}{Data.table: Population allele frequencies.}

\item{locusCol}{Character: Column name in \code{freqData} with the locus IDs.
Default is 'LOCUS'.}

\item{freqCol}{Character: Column name in \code{freqData} with the allele frequencies.
Default is 'FREQ'.}

\item{numSims}{Integer: The number of simulated individuals for each family
relationship. Default is 100.}
}
\value{
Returns a data.table with the following columns:
\enumerate{
   \item \code{$SIM}, the simulation number.
   \item \code{$LOCUS}, the locus ID.
   \item \code{$SAMPLE}, the sample ID.
   \item \code{$GT}, the diploid genotype as counts of the Alt alleles.
}
}
\description{
This function produces families of siblings, half-siblings, cousins and
half-cousins from observed population allele frequencies. These simulations can
then be used to test the power to discern between individuals with different
levels of relatedness. Assumes diploid genotypes.
}
\details{
The output can be used to generate a simulated genetic relationship matrix (GRM)
that can be compared against an observed GRM using the function,
\code{family_sim_compare}. This can provide a graphical comparison
between the observed and expected (simulated) distribution of relatedness
values that you might expect for different familial relationships, given the
number of loci and their allele frequencies.

In this function, a 'simulation' comprises a draw of 10 individuals:
2 are unrelated to each other and all other individuals in the simulation,
2 are siblings, 2 are half-siblings, 2 are cousins, and 2 are half-cousins.

Each simulation takes the naming convention 'S[sim number]', for example, S1
S2 ... S10 if 10 simulations are requested. The naming convention for each
simulated individual is 'S[sim number]_[relationship]', with the 'relationship'
tag being one of the following:
\itemize{
 \item 'unrel_1' and 'unrel_2' are two completely unrelated individuals.
 \item 'sib_1' and 'sib_2' are full siblings.
 \item 'halfsib_1' are 'halfsib_2' are half siblings.
 \item 'cous_1' and 'cous_2' are cousins.
 \item 'halfcous_1' and 'halfcous_2' are half cousins.
}
Note, that within the sth simulation, all pairs are unrelated to each other as
well. For example, in simulation S1, sib_1 and sib_2 are completely unrelated
to halfsib_1 and halfsib_2. This means the number of unrelated pairs within
an sth simulation is 45 pairs, 4 of these are related (siblings, half-siblings,
cousins, and half-cousins), and 41 are unrelated. Individuals from different
simulation are completely unrelated. For example, all individuals from simulation
S1 are completely unrelated to all individuals from simulation S2.
}
\examples{
library(genomalicious)
data(data_Genos)

# Subset Pop1 genotypes
genosPop1 <- data_Genos[POP=='Pop1', c('SAMPLE', 'LOCUS', 'GT')]

# Get the allele frequencies for Pop1
freqsPop1 <- genosPop1[, .(FREQ=sum(GT)/(length(GT)*2)), by=LOCUS]

# Simulate 100 families
simFamily <- family_sim_data(
   freqData=freqsPop1,
   locusCol='LOCUS',
   freqCol='FREQ',
   numSims=100
)

# Create some siblings in Pop1 from two sets of parents
parentList <- list(c('Ind1_1','Ind1_2'), c('Ind1_3','Ind1_4'))
genosSibs <- lapply(1:2, function(i){
  parents <- parentList[[i]]

  child <- paste(sub('Ind1_', '', parents), collapse='.')

  gamete1 <- genosPop1[SAMPLE == parents[1]] \%>\%
    .[, .(GAMETE=rbinom(n=2,size=1,prob=GT/2)), by=c('SAMPLE','LOCUS')] \%>\%
    .[, SIB:=1:2, by=LOCUS]

  gamete2 <- genosPop1[SAMPLE == parents[2]] \%>\%
    .[, .(GAMETE=rbinom(n=2,size=1,prob=GT/2)), by=c('SAMPLE','LOCUS')] \%>\%
    .[, SIB:=1:2, by=LOCUS]

  rbind(gamete1, gamete2) \%>\%
    .[, .(GT=sum(GAMETE)), by=c('LOCUS','SIB')] \%>\%
    .[, SAMPLE:=paste0('Child_',child,'_',SIB)]
}) \%>\%
  do.call('rbind', .)

### THE OBSERVED GENOMIC RELATIONSHIPS MATRIX
library(AGHmatrix)

# Combine the population samples and the created siblings
# into a single genotype matrix
obsGenosMat <- rbind(genosPop1, genosSibs[, c('SAMPLE','LOCUS','GT')]) \%>\%
  DT2Mat_genos()

# Calculate the GRM
obsGRM <- Gmatrix(obsGenosMat, method='Yang', ploidy=2)

### THE SIMULATED GENOMIC RELATIONSHIPS MATRIX
# Convert simulated families into a genotype matrix
simGenosMat <- DT2Mat_genos(simFamily)

# Calculate the GRM
simGRM <- Gmatrix(simGenosMat, method='Yang', ploidy=2)

### COMPARE THE OBSERVED AND SIMULATED
relComp <- family_sim_compare(
   simGRM=simGRM,
   obsGRM=obsGRM,
   look='classic'
)

# The data
relComp$data

# Simulated dataset
relComp$data[!is.na(SIM)]

# The observed dataset
relComp$data[is.na(SIM)]

# Plot of relatedness values. Dashed lines denote relatedness
# values of 0, 0.0625, 0.125, 0.25, and 0.5, which are the theoretical
# expectations for unrelated individuals, half-cousins, cousins, half-siblings,
# and siblings, respectively.
# You will note a large variance are the expected values, which
# is not surprising for this very small SNP dataset (200 loci).
relComp$plot

# Take a look at the "known" relationships in the observed dataset using the
# offspring we created.
# Note, siblings and parent-offspring pairs have a theoretical
# relatedness of 0.5. But you will probably find the "observed"
# relatedness might be lower.
relComp$data[SAMPLE1=='Child_1.2_1' & SAMPLE2\%in\%c('Child_1.2_2','Ind1_1','Ind1_2')]
relComp$data[SAMPLE1=='Child_3.4_1' & SAMPLE2\%in\%c('Child_3.4_2','Ind1_3','Ind1_4')]

# Now take a look at the simulated distribution: the possible values for
# siblings given this dataset are quite wide.
relComp$data[FAMILY=='Half-siblings']$RELATE \%>\% summary()
relComp$data[FAMILY=='Siblings']$RELATE \%>\% summary()

}
